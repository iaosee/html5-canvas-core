class r{constructor(){this.startTime=0,this.running=!1,this.elapsed=0,this.elapsedTime=0}start(){this.startTime=+new Date,this.elapsedTime=null,this.running=!0}stop(){this.elapsed=+new Date-this.startTime,this.running=!1}getElapsedTime(){return this.running?+new Date-this.startTime:this.elapsed}isRunning(){return this.running}reset(){this.elapsed=0}}class i{constructor(t=1e3,s=i.linear()){this.duration=1e3,this.stopwatch=new r,this.duration=t,this.timeWarp=s}static linear(){return t=>t}static easeIn(t=1){return s=>Math.pow(s,t*2)}static easeOut(t=1){return s=>1-Math.pow(1-s,t*2)}static easeInOut(){return t=>t-Math.sin(t*Math.PI*2)/(2*Math.PI)}static elastic(t=2){return s=>(1-Math.cos(s*Math.PI*t))*(1-s)+s}static bounce(t){const s=i.elastic(t);return e=>(e=s(e),e<=1?e:2-e)}start(){this.stopwatch.start()}stop(){this.stopwatch.stop()}setTimeWarp(t=i.linear()){return this.timeWarp=t,this}getRealElapsedTime(){return this.stopwatch.getElapsedTime()}getElapsedTime(){const t=this.stopwatch.getElapsedTime(),s=t/this.duration;return this.stopwatch.running?this.timeWarp===void 0?t:t*(this.timeWarp(s)/s)||0:void 0}isRunning(){return this.stopwatch.running}isOver(){return this.stopwatch.getElapsedTime()>this.duration}reset(){this.stopwatch.reset()}}export{i as A};
