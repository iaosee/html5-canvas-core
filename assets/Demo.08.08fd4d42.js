var d=Object.defineProperty;var u=(a,n,t)=>n in a?d(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t;var r=(a,n,t)=>(u(a,typeof n!="symbol"?n+"":n,t),t);import{B as f}from"./BaseDemo.9c35b300.js";class h extends f{constructor(t){super(t);r(this,"name","\u7EBF\u6761\u8FDE\u63A5");r(this,"polylineList",[]);r(this,"paths",[]);r(this,"mousePosition",{x:0,y:0});r(this,"lineColor","rgba(0,0,255,0.9)");r(this,"pointColor",this.randomRgba());r(this,"startDraw",!1);this.canvas=t,this.listenEvents()}static init(t){return new h(t)}draw(){return this.clearScreen().drawGrid().drawLines().drawPoint()}drawPoint(){const{paths:t,context:s}=this;for(let e=0,i=t.length;e<i;e++)s.beginPath(),s.arc(t[e].x,t[e].y,5,0,Math.PI*2,!1),s.fillStyle=this.pointColor,s.fill();return this}drawLines(){const{paths:t,mousePosition:s,context:e}=this;if(!t.length)return this;e.beginPath(),e.moveTo(t[0].x,t[0].y);for(let i=1,c=t.length;i<c;i++)e.lineTo(t[i].x,t[i].y);return this.startDraw&&e.lineTo(s.x,s.y),e.strokeStyle=this.lineColor,e.stroke(),this}listenEvents(){const{canvas:t,context:s}=this,e=o=>{const l=this.coordinateTransformation(o.clientX,o.clientY);this.paths.push(l),this.startDraw=!0},i=o=>{const l=this.coordinateTransformation(o.clientX,o.clientY);console.log(l),this.startDraw=!1},c=o=>{const l=this.coordinateTransformation(o.clientX,o.clientY);this.mousePosition=l};t.addEventListener("click",e,!1),t.addEventListener("dblclick",i,!1),t.addEventListener("mousemove",c,!1)}}export{h as Demo};
