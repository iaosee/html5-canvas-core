var c=Object.defineProperty;var f=(n,e,t)=>e in n?c(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var r=(n,e,t)=>(f(n,typeof e!="symbol"?e+"":e,t),t);import{G as m}from"./lil-gui.esm.7a5dd4ff.js";import{R as w}from"./Rubberband.acc17faa.js";import{P as g}from"./BaseDemo.9c35b300.js";import{R as P}from"./RegularPolygon.3940033a.js";import"./Polygon.2e760a6a.js";class h extends w{constructor(t){super(t);r(this,"name","\u62D6\u62FD\u7ED8\u5236\u7684\u7269\u4F53");r(this,"polygons",[]);r(this,"draggingPolygon");r(this,"draggingOffsetPos",new g);r(this,"config",{sides:5,startAngle:0,fillStyle:[71,163,56,.2],strokeStyle:[0,128,255,.8],filled:!0,editing:!1,redraw:()=>{console.log("redraw"),this.clearScreen().drawGrid().drawPolygons()}});this.canvas=t,this.createControl().listenEvents()}static init(t){return new h(t)}start(){return this.drawGrid().drawPolygons()}draw(){return this}createControl(){const{config:t}=this;this.gui=new m;const{gui:s}=this;return s.add(t,"sides").min(3).max(50).step(1),s.add(t,"startAngle").min(0).max(180).step(15),s.add(t,"filled"),s.addColor(t,"fillStyle"),s.addColor(t,"strokeStyle"),s.add(t,"redraw"),s.add(t,"editing"),this}drawRubberbandShape(t){const{context:s,config:i,mousedownPos:o,mousemovePos:a,rubberbandRect:d}=this,u=Math.sqrt(Math.pow(d.width,2)+Math.pow(d.height,2)),l=new P({x:o.x,y:o.y,radius:u,sides:i.sides,startAngle:this.degreesToRadian(i.startAngle),fillStyle:this.rgbaFromArr(i.fillStyle),strokeStyle:this.rgbaFromArr(i.strokeStyle),filled:i.filled});return this.drawPolygon(l),!this.dragging&&!o.equals(t)&&this.polygons.push(l),this}drawPolygon(t){const{context:s,config:i,dpr:o}=this;return t.createPath(s),t.stroke(s),t.filled&&t.fill(s),this}drawPolygons(){return this.polygons.forEach(t=>this.drawPolygon(t)),this}listenEvents(){return super.listenEvents(),window.addEventListener("keydown",t=>t.key==="c"&&(this.polygons=[])),this}onMousedownHandler(t){const{context:s,config:i,dpr:o}=this;t.preventDefault(),this.dragging=!0,this.mousemovePos=this.mousedownPos=this.coordinateTransformation(t.clientX,t.clientY),s.fillStyle=this.rgbaFromArr(i.fillStyle)||this.randomRgba(),i.editing?this.polygons.forEach(a=>{!a.isPointInPath(s,t.clientX*o,t.clientY*o)||(this.draggingPolygon=a,this.draggingOffsetPos=new g(this.mousedownPos.x-a.x,this.mousedownPos.y-a.y))}):this.saveDrawingSurface()}onMousemoveHandler(t){const{context:s,config:i}=this;t.preventDefault(),this.mousemovePos=this.coordinateTransformation(t.clientX,t.clientY),i.editing&&this.dragging?(this.draggingPolygon&&this.draggingPolygon.move(this.mousemovePos.x-this.draggingOffsetPos.x,this.mousemovePos.y-this.draggingOffsetPos.y),this.clearScreen().drawGrid().drawPolygons()):this.dragging&&(this.restoreDrawingSurface(),this.updateRubberband(this.mousemovePos),this.guidewires&&this.drawBandGuidelines())}onMouseupHandler(t){const{config:s}=this;t.preventDefault(),this.dragging=!1,this.draggingPolygon=null,this.mousemovePos=this.coordinateTransformation(t.clientX,t.clientY),!s.editing&&(this.restoreDrawingSurface(),this.updateRubberband(this.mousemovePos))}}export{h as Demo};
