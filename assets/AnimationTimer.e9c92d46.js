var n=Object.defineProperty;var h=(i,t,s)=>t in i?n(i,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):i[t]=s;var e=(i,t,s)=>(h(i,typeof t!="symbol"?t+"":t,s),s);class u{constructor(){e(this,"startTime",0);e(this,"running",!1);e(this,"elapsed",0);e(this,"elapsedTime",0)}start(){this.startTime=+new Date,this.elapsedTime=null,this.running=!0}stop(){this.elapsed=+new Date-this.startTime,this.running=!1}getElapsedTime(){return this.running?+new Date-this.startTime:this.elapsed}isRunning(){return this.running}reset(){this.elapsed=0}}class a{constructor(t=1e3,s=a.linear()){e(this,"duration",1e3);e(this,"stopwatch",new u);e(this,"timeWarp");this.duration=t,this.timeWarp=s}static linear(){return t=>t}static easeIn(t=1){return s=>Math.pow(s,t*2)}static easeOut(t=1){return s=>1-Math.pow(1-s,t*2)}static easeInOut(){return t=>t-Math.sin(t*Math.PI*2)/(2*Math.PI)}static elastic(t=2){return s=>(1-Math.cos(s*Math.PI*t))*(1-s)+s}static bounce(t){const s=a.elastic(t);return r=>(r=s(r),r<=1?r:2-r)}start(){this.stopwatch.start()}stop(){this.stopwatch.stop()}setTimeWarp(t=a.linear()){return this.timeWarp=t,this}getRealElapsedTime(){return this.stopwatch.getElapsedTime()}getElapsedTime(){const t=this.stopwatch.getElapsedTime(),s=t/this.duration;return this.stopwatch.running?this.timeWarp===void 0?t:t*(this.timeWarp(s)/s)||0:void 0}isRunning(){return this.stopwatch.running}isOver(){return this.stopwatch.getElapsedTime()>this.duration}reset(){this.stopwatch.reset()}}export{a as A};
