import{G as u}from"./lil-gui.esm-hsJpI9MV.js";import{B as w,P as o}from"./BaseDemo-CScLeyCm.js";import{P as d,C as g}from"./Polygon-CTGkoOl2.js";import{R as f}from"./index-BAL6X_Bf.js";import{C as p}from"./CircleImage-DO0Eo77P.js";import{R as y}from"./RandomConvexPolygon-W4pRqJF6.js";import{g as x}from"./golfball-fqIsnLt-.js";class m extends w{constructor(e){super(e),this.name="碰撞检测 — 随机多边形",this.shapes=[],this.mousedownPos=new o(0,0),this.mousemovePos=new o(0,0),this.randomPolygon=new y({maxWidth:200,maxHeight:200}),this.polygonPoints=[[new o(100,100),new o(100,200),new o(200,200)],[new o(300,100),new o(300,200),new o(400,200),new o(400,100)],[new o(500,100),new o(475,200),new o(600,200),new o(625,100)]],this.config={boundingBox:!1,centroid:!1},this.createControl().initShapes().listenEvents()}static init(e){return new m(e)}createControl(){const{config:e}=this;this.gui=new u;const{gui:i}=this;return i.add(e,"boundingBox").onFinishChange(t=>this.drawScene()),i.add(e,"centroid").onFinishChange(t=>this.drawScene()),this}start(){return this.draw()}draw(){return this.drawScene()}initShapes(){const{polygonPoints:e}=this,i=this.polygonPoints.length;for(let t=0;t<i;++t){const n=new d,s=e[t];n.setPoints(s),n.name=`Polygon ${t}`,n.strokeStyle=this.randomRgba(),n.fillStyle=this.randomRgba(),this.shapes.push(n)}for(let t=0;t<2;t++)for(let n=0;n<5;n++){const s=this.randomPolygon.getConvex(f.init(4,10).random()),a=new d;a.setPoints(s),a.move(n*200,(t+1)*200),a.name=`Polygon ${t}-${n}`,a.strokeStyle=this.randomRgba(),a.fillStyle=this.randomRgba(),this.shapes.push(a)}return this.shapes.push(new g({name:"circle 1",x:100,y:50,radius:30})),this.shapes.push(new g({name:"circle 2",x:250,y:50,radius:50})),this.shapes.push(new p({name:"circleImage",x:800,y:100,radius:72,strokeStyle:"red",imageSource:x})),this}drawShapes(){const{context:e,config:i}=this;return this.shapes.forEach(t=>{if(t.stroke(e),t.fill(e),i.boundingBox){const n=t.getBoundingBox();e.strokeRect(n.x,n.y,n.width,n.height)}if(i.centroid){const n=t.centroid();e.beginPath(),e.arc(n.x,n.y,5,0,Math.PI*2,!1),e.closePath(),e.fill()}}),this}drawScene(){return this.clearScreen().drawGrid().drawShapes(),this}detectCollisions(){const{context:e,shapes:i,shapeBeingDragged:t}=this;let n=30;if(t)return e.save(),e.font="20px Palatino",i.forEach(s=>{s!==t&&t.collidesWith(s)&&(e.lineWidth=10,e.fillStyle="red",e.strokeStyle="red",e.fillText(`${t.name} Collision with ${s.name}`,20,n),e.strokeRect(0,0,this.width,this.height),n+=40)}),e.restore(),this}listenEvents(){const{canvas:e,context:i,dpr:t,mousedownPos:n,mousemovePos:s,shapes:a}=this;return e.addEventListener("mousedown",h=>{const r=this.coordinateTransformation(h.clientX,h.clientY);a.forEach(l=>{l.isPointInPath(i,r.x*t,r.y*t)&&(this.shapeBeingDragged=l,n.x=r.x,n.y=r.y,s.x=r.x,s.y=r.y)})}),e.addEventListener("mousemove",h=>{var c;const r=this.coordinateTransformation(h.clientX,h.clientY);if(!this.shapeBeingDragged)return;const l={x:r.x-s.x,y:r.y-s.y};(c=this.shapeBeingDragged)==null||c.move(l.x,l.y),s.x=r.x,s.y=r.y,this.draw().detectCollisions()}),e.addEventListener("mouseup",h=>{this.shapeBeingDragged=null}),this}}export{m as Demo};
