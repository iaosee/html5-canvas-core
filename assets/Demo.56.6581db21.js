import{G as d}from"./lil-gui.esm.7a5dd4ff.js";import{B as m}from"./BaseDemo.deaf79c0.js";import{A as e}from"./AnimationTimer.dddf45c1.js";import{S as n}from"./Sprite.ec3d1e74.js";class r extends m{constructor(a){super(a),this.canvas=a,this.name="\u65F6\u95F4\u52A8\u753B-\u7F13\u52A8\u51FD\u6570",this.pushAnimationTimer=new e(3e3),this.animationFnMap={linear:e.linear(),easeIn:e.easeIn(2),easeOut:e.easeOut(2),easeInOut:e.easeInOut(),elastic:e.elastic(4),bounce:e.bounce(4)},this.config={trace:!1,animationFn:"linear",restartAnimation:()=>this.restartAnimationTimer()},this.pushAnimationTimer.setTimeWarp(this.animationFnMap[this.config.animationFn]),this.createControl().initSprite()}static init(a){return new r(a)}createControl(){const{config:a}=this;this.gui=new d;const{gui:i}=this;return i.add(a,"trace"),i.add(a,"animationFn",Object.keys(this.animationFnMap)).onFinishChange(s=>{this.pushAnimationTimer.setTimeWarp(this.animationFnMap[s])}),i.add(a,"restartAnimation"),this}draw(a){return this.clearScreen().drawGrid().drawScene(a)}initSprite(){const{pushAnimationTimer:a}=this;return this.ball=new n("ball",{paint:(i,s)=>this.paintBall(i,s)}),this.ledge=new n("ledge",{paint(i,s){s.save(),s.shadowColor="rgba(0,0,0,0.8)",s.shadowBlur=8,s.shadowOffsetX=4,s.shadowOffsetY=4,s.fillStyle="rgba(255,255,0,0.6)",s.fillRect(i.x,i.y,i.width,i.height),s.restore()}}),this.ballMoveBehavior=new u(this.ball,this.ledge,a),this.ball.addBehavior(this.ballMoveBehavior),this.ledge.x=200,this.ledge.y=this.height/2,this.ledge.height=5,this.ledge.width=this.width-this.ledge.x*2,this.ball.width=50,this.ball.height=50,this.ball.x=this.ledge.x+this.ball.width/2,this.ball.y=this.ledge.y-this.ball.width/2,this.ball.velocityX=100,this.ball.velocityY=0,this}drawScene(a){const{context:i,config:s,ball:t,ledge:l,ballMoveBehavior:h}=this;return t.update(i,a),t.paint(i),l.update(i,a),l.paint(i),s.trace&&h.ballLocations.forEach(o=>{this.paintBall(t,i,o)}),this}restartAnimationTimer(){const{pushAnimationTimer:a,ballMoveBehavior:i}=this;i.ballLocations=[],a.isRunning()&&a.stop(),a.start()}paintBall(a,i,s){i.save(),i.beginPath(),i.arc(s||a.x,a.y,a.width/2,0,Math.PI*2,!1),i.clip(),i.shadowColor="rgb(0,0,255)",i.shadowOffsetX=-4,i.shadowOffsetY=-4,i.shadowBlur=8,i.lineWidth=2,i.strokeStyle="rgb(100,100,195)",i.stroke(),i.beginPath(),i.arc(s||a.x,a.y,a.width/2/2,0,Math.PI*2,!1),i.clip(),i.shadowColor="rgb(255,255,0)",i.shadowOffsetX=-4,i.shadowOffsetY=-4,i.shadowBlur=8,i.stroke(),i.restore()}}class u{constructor(a,i,s){this.ball=a,this.ledge=i,this.pushAnimationTimer=s,this.ballLocations=[]}isBallOnLedge(){const{ball:a,ledge:i}=this;return a.x+a.width>i.x&&a.x<i.x+i.width}resetBall(){this.ballLocations=[],this.ball.x=this.ledge.x+this.ball.width/2,this.ball.y=this.ledge.y-this.ball.width/2}updateBallPosition(a){const{ball:i}=this;i.x+=i.velocityX*(a/1e3)}execute(a,i,s){const{pushAnimationTimer:t}=this,l=t.getElapsedTime();let h=0;t.isRunning()&&this.lastTime!==void 0&&(h=l-this.lastTime,this.updateBallPosition(h),this.ballLocations.push(a.x),this.isBallOnLedge()?t.isOver()&&(t.stop(),this.ballLocations=[]):(t.stop(),this.resetBall())),this.lastTime=l}}export{r as Demo,u as MoveBallBehavior};
