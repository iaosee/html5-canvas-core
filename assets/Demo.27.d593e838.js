import{G as d}from"./lil-gui.esm.7a5dd4ff.js";import{R as l}from"./Rubberband.c7ec187d.js";import{P as a}from"./BaseDemo.deaf79c0.js";class h extends l{constructor(t){super(t),this.canvas=t,this.name="\u53EF\u7F16\u8F91\u7684\u8D1D\u585E\u5C14\u66F2\u7EBF",this.endPoints=[new a,new a],this.controlPoints=[new a,new a],this.config={editing:!1,lineWidth:5,endPointFillStyle:[255,124,3,.5],ctrlPointFillStyle:[30,130,13,.5],strokeStyle:[0,128,255,.8],CONTROL_POINT_RADIUS:5},this.createControl().listenEvents()}static init(t){return new h(t)}start(){return this.drawGrid()}draw(){return this}createControl(){const{config:t}=this;this.gui=new d;const{gui:i}=this;return i.add(t,"lineWidth").min(1).max(20).step(1),i.addColor(t,"strokeStyle"),i.addColor(t,"endPointFillStyle"),i.addColor(t,"ctrlPointFillStyle"),this}drawRubberbandShape(t){return this.updateEndAndControlPoints().drawBezierCurve(),this}updateEndAndControlPoints(){const{endPoints:t,controlPoints:i,rubberbandRect:n}=this;return t[0].x=n.x,t[0].y=n.y,t[1].x=n.x+n.width,t[1].y=n.y+n.height,i[0].x=n.x,i[0].y=n.y+n.height,i[1].x=n.x+n.width,i[1].y=n.y,this}drawBezierCurve(){const{context:t,config:i,endPoints:n,controlPoints:o,rubberbandRect:e}=this;return t.lineWidth=i.lineWidth||5,t.strokeStyle=this.rgbaFromArr(i.strokeStyle),t.beginPath(),t.moveTo(n[0].x,n[0].y),t.bezierCurveTo(o[0].x,o[0].y,o[1].x,o[1].y,n[1].x,n[1].y),t.stroke(),this}drawControlPoint(t){const{context:i,config:n,endPoints:o,controlPoints:e}=this;return i.beginPath(),i.save(),i.lineWidth=1,i.setLineDash([8,4]),i.lineDashOffset=5,i.strokeStyle="rgba(0,0,0,0.2)",i.moveTo(o[t].x,o[t].y),i.lineTo(e[t].x,e[t].y),i.stroke(),i.restore(),i.beginPath(),i.arc(e[t].x,e[t].y,n.CONTROL_POINT_RADIUS,0,Math.PI*2,!1),i.stroke(),i.fill(),this}drawControlPoints(){const{context:t,config:i}=this,n=this.rgbaFromArr(i.ctrlPointFillStyle);return t.save(),t.fillStyle=n,t.strokeStyle=n,this.drawControlPoint(0),this.drawControlPoint(1),t.stroke(),t.fill(),t.restore(),this}drawEndPoint(t){const{context:i,config:n,endPoints:o}=this;return i.beginPath(),i.arc(o[t].x,o[t].y,n.CONTROL_POINT_RADIUS,0,Math.PI*2,!1),i.stroke(),i.fill(),this}drawEndPoints(){const{context:t,config:i,endPoints:n}=this,o=this.rgbaFromArr(i.endPointFillStyle);t.save(),t.strokeStyle=o,t.fillStyle=o,this.drawEndPoint(0),this.drawEndPoint(1),t.stroke(),t.fill(),t.restore()}drawControlAndEndPoints(){this.drawControlPoints(),this.drawEndPoints()}cursorInEndPoint(t){const{context:i,dpr:n,config:o,endPoints:e}=this;let r;return e.forEach(s=>{i.beginPath(),i.arc(s.x,s.y,o.CONTROL_POINT_RADIUS+o.lineWidth,0,Math.PI*2,!1),i.isPointInPath(t.x*n,t.y*n)&&(r=s)}),r}cursorInControlPoint(t){const{context:i,dpr:n,config:o,controlPoints:e}=this;let r;return e.forEach(function(s){i.beginPath(),i.arc(s.x,s.y,o.CONTROL_POINT_RADIUS+o.lineWidth,0,Math.PI*2,!1),i.isPointInPath(t.x*n,t.y*n)&&(r=s)}),r}updateDraggingPoint(t){this.draggingPoint.x=t.x,this.draggingPoint.y=t.y}onMousedownHandler(t){const{context:i,config:n}=this;this.mousemovePos=this.mousedownPos=this.coordinateTransformation(t.clientX,t.clientY),t.preventDefault(),n.editing?(this.draggingPoint=this.cursorInControlPoint(this.mousemovePos),this.draggingPoint||(this.draggingPoint=this.cursorInEndPoint(this.mousemovePos))):(this.saveDrawingSurface(),this.updateRubberbandRectangle(this.mousemovePos),this.dragging=!0)}onMousemoveHandler(t){this.mousemovePos=this.coordinateTransformation(t.clientX,t.clientY),(this.dragging||this.draggingPoint)&&(t.preventDefault(),this.restoreDrawingSurface()),this.dragging?(this.updateRubberband(this.mousemovePos),this.drawControlAndEndPoints()):this.draggingPoint&&(this.updateDraggingPoint(this.mousemovePos),this.drawControlAndEndPoints(),this.drawBezierCurve())}onMouseupHandler(t){const{context:i,config:n}=this;this.mousemovePos=this.coordinateTransformation(t.clientX,t.clientY),this.restoreDrawingSurface(),n.editing?(this.draggingPoint?this.drawControlAndEndPoints():n.editing=!1,this.drawBezierCurve(),this.draggingPoint=null):(this.updateRubberband(this.mousemovePos),this.drawControlAndEndPoints(),this.dragging=!1,n.editing=!0)}}export{h as Demo};
