import{G as d}from"./lil-gui.esm-hsJpI9MV.js";import{B as c}from"./BaseDemo-CScLeyCm.js";import{A as s}from"./AnimationTimer-BfU0TLd1.js";import{S as l}from"./Sprite-DYUj_957.js";import{b as m}from"./RunnerSprite-ClBqnfDZ.js";class r extends c{constructor(t){super(t),this.name="时间动画-缓动函数控制精灵运动",this.ANIMATION_DURATION=3e3,this.animationTimer=new s(this.ANIMATION_DURATION,s.easeInOut()),this.animationFnMap={linear:s.linear(),easeIn:s.easeIn(2),easeOut:s.easeOut(2),easeInOut:s.easeInOut(),elastic:s.elastic(4),bounce:s.bounce(4)},this.config={animationFn:"linear",startRun:()=>this.startAnimation(),endRun:()=>this.endAnimation()},this.createControl().initSprite()}static init(t){return new r(t)}createControl(){const{config:t}=this;this.gui=new d;const{gui:i}=this;return i.add(t,"animationFn",Object.keys(this.animationFnMap)).onFinishChange(n=>{this.animationTimer.setTimeWarp(this.animationFnMap[n])}),i.add(t,"startRun"),i.add(t,"endRun"),this}draw(t){return this.clearScreen().drawGrid().drawScene(t)}initSprite(){const{canvas:t,animationTimer:i}=this;return this.runner=new m,this.ledge=new l("ledge",{paint(n,e){e.save(),e.shadowColor="rgba(0,0,0,0.8)",e.fillStyle="rgba(204,204,0,0.6)",e.fillRect(n.x,n.y,n.width,n.height),e.restore()}}),this.ledge.x=0,this.ledge.y=this.height/2,this.ledge.height=5,this.ledge.width=this.width,this.runner.setX(this.ledge.x+this.ledge.width-this.runner.width),this.runner.setY(this.ledge.y-this.runner.height),this.runBehavior=new u(i),this.moveBehavior=new v(i),this.runner.addBehavior(this.runBehavior),this.runner.addBehavior(this.moveBehavior),this.runner.velocityX=100,this}drawScene(t){const{context:i,animationTimer:n}=this;return n.isOver()&&this.endAnimation(),this.ledge.update(i,t),this.ledge.paint(i),this.runner.update(i,t),this.runner.paint(i),this}startAnimation(){const{context:t,animationTimer:i}=this;return i.isRunning()||i.start(),this}endAnimation(){const{context:t,animationTimer:i}=this;return i.stop(),i.reset(),this.runBehavior.reset(),this.moveBehavior.reset(),this}}class u{constructor(t){this.animationTimer=t,this.lastAdvance=0,this.PAGEFLIP_INTERVAL=100}reset(){this.lastAdvance=0}execute(t,i,n){const{animationTimer:e}=this;if(!e.isRunning())return;const a=e.getElapsedTime();this.lastAdvance===0?this.lastAdvance=a:this.lastAdvance!==0&&a-this.lastAdvance>this.PAGEFLIP_INTERVAL&&(t.painter.advance(),this.lastAdvance=a)}}class v{constructor(t){this.animationTimer=t,this.lastMove=0}reset(){this.lastMove=0}execute(t,i,n){const{animationTimer:e}=this;if(!e.isRunning())return;const a=e.getElapsedTime(),o=a-this.lastMove;this.lastMove===0?this.lastMove=a:(t.x-=o/1e3*t.velocityX,t.x=t.x<0?i.canvas.width/window.devicePixelRatio:t.x,this.lastMove=a)}}export{r as Demo};
