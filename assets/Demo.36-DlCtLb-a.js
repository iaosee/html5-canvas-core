var l=Object.defineProperty;var m=(a,s,e)=>s in a?l(a,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[s]=e;var i=(a,s,e)=>m(a,typeof s!="symbol"?s+"":s,e);import{G as d}from"./lil-gui.esm-hsJpI9MV.js";import{B as g}from"./BaseDemo-DB1y7toB.js";import{i as w}from"./flower-BOKp_aAz.js";class o extends g{constructor(e){super(e);i(this,"name","图像绘制");i(this,"image");i(this,"config",{scale:1,minScale:.1,maxScale:5});this.canvas=e,this.loadImage(w).then(t=>this.image=t).then(()=>this.clearScreen().drawScene()),this.createControl().listenEvents()}static init(e){return new o(e)}start(){return this}draw(){return this}createControl(){const{config:e}=this;this.gui=new d;const{gui:t}=this;return t.add(e,"scale").min(e.minScale).max(e.maxScale).step(.01).onChange(()=>this.drawScene()),this}drawScene(){const{context:e,config:t}=this,n=this.width,c=this.height,r=n*t.scale,h=c*t.scale;return e.clearRect(0,0,this.width,this.height),e.drawImage(this.image,-r/2+n/2,-h/2+c/2,r,h),this}listenEvents(){const{canvas:e}=this;return e.addEventListener("wheel",this.onWheelHandler.bind(this)),this}drawRubberbandShape(e){return console.log(e),this}onWheelHandler(e){const{config:t}=this,n=-e.deltaY/1e3;console.log(t.scale),t.scale+=n,t.scale<=t.minScale?t.scale=t.minScale:t.scale>t.maxScale&&(t.scale=t.maxScale),this.drawScene()}}export{o as Demo};
